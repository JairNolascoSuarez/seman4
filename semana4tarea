//: Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"
var valor : Int = 0
var cadena : String

//: Playground - noun: a place where people can playg
import UIKit

//var str = "Hello, playground"

enum Velocidades : Int {
    case apagado = 0
    case velocidadBaja = 20
    case velocidadMedia = 50
    case velocidadAlta = 120
    

    init(VelocidadIni : Velocidades){
    self = VelocidadIni
    }
    
    
}


//print(" ejempo", (Velocidades.VelocidadAlta.rawValue))



class Auto {
    var velocidad : Velocidades
    
    init() {
        self.velocidad = Velocidades(VelocidadIni: .apagado)
    }

    
    func cambioDeVelocidad () -> ( actual : Int, velocidadEnCadena: String){

        
        switch self.velocidad {
        case .apagado:
            self.velocidad = .velocidadBaja
            return (velocidad.self.rawValue, "VelocidadBaja")
        case .velocidadBaja:
            self.velocidad = .velocidadMedia
            return (velocidad.self.rawValue, "VelocidadMedia")
        case .velocidadMedia:
            self.velocidad = .velocidadAlta
            return (velocidad.self.rawValue, "VelocidadAlta")
        case .velocidadAlta:
            self.velocidad = .apagado
            return (velocidad.self.rawValue, "Apagado")

        }
        
        
  
    }
}

var micarro = Auto()

micarro.velocidad


for indice in 1 ... 20
    {
     
        //valor = micarro.cambioDeVelocidad().actual
        //cadena = micarro.cambioDeVelocidad().velocidadEnCadena
        var r = micarro.cambioDeVelocidad()
        print("\(indice).- \(r.actual ) , \(r.velocidadEnCadena)"  )
        

}
